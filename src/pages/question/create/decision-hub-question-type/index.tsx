import { Typography } from '@/components/components/ui/typography'
import { type FC } from 'react'

const YesNoIcon = ({ color = "black" }: { color?: string }) => (
  <svg width="50" height="24" viewBox="0 0 50 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M7 22H4C3.46957 22 2.96086 21.7893 2.58579 21.4142C2.21071 21.0391 2 20.5304 2 20V13C2 12.4696 2.21071 11.9609 2.58579 11.5858C2.96086 11.2107 3.46957 11 4 11H7M14 9V5C14 4.20435 13.6839 3.44129 13.1213 2.87868C12.5587 2.31607 11.7956 2 11 2L7 11V22H18.28C18.7623 22.0055 19.2304 21.8364 19.5979 21.524C19.9654 21.2116 20.2077 20.7769 20.28 20.3L21.66 11.3C21.7035 11.0134 21.6842 10.7207 21.6033 10.4423C21.5225 10.1638 21.3821 9.90629 21.1919 9.68751C21.0016 9.46873 20.7661 9.29393 20.5016 9.17522C20.2371 9.0565 19.9499 8.99672 19.66 9H14Z" stroke={color} stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
    <path d="M43 2L46 2C46.5304 2 47.0391 2.21071 47.4142 2.58579C47.7893 2.96086 48 3.46957 48 4L48 11C48 11.5304 47.7893 12.0391 47.4142 12.4142C47.0391 12.7893 46.5304 13 46 13L43 13M36 15L36 19C36 19.7956 36.3161 20.5587 36.8787 21.1213C37.4413 21.6839 38.2044 22 39 22L43 13L43 2L31.72 2C31.2377 1.99455 30.7696 2.16359 30.4021 2.47599C30.0346 2.78839 29.7923 3.22309 29.72 3.7L28.34 12.7C28.2965 12.9866 28.3158 13.2793 28.3967 13.5577C28.4775 13.8362 28.6179 14.0937 28.8081 14.3125C28.9984 14.5313 29.2339 14.7061 29.4984 14.8248C29.7629 14.9435 30.0501 15.0033 30.34 15L36 15Z" stroke={color} stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
  </svg>
);

const MultipleChoiceIcon = ({ color = "black" }: { color?: string }) => (
  <svg width="37" height="40" viewBox="0 0 37 40" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M8.26297 15V12.84L8.12297 12.38V8.6C8.12297 7.86667 7.90297 7.3 7.46297 6.9C7.02297 6.48667 6.3563 6.28 5.46297 6.28C4.86297 6.28 4.26964 6.37333 3.68297 6.56C3.10964 6.74667 2.62297 7.00667 2.22297 7.34L1.24297 5.52C1.8163 5.08 2.4963 4.75333 3.28297 4.54C4.08297 4.31333 4.90964 4.2 5.76297 4.2C7.30964 4.2 8.50297 4.57333 9.34297 5.32C10.1963 6.05333 10.623 7.19333 10.623 8.74V15H8.26297ZM4.90297 15.14C4.10297 15.14 3.40297 15.0067 2.80297 14.74C2.20297 14.46 1.7363 14.08 1.40297 13.6C1.08297 13.1067 0.922969 12.5533 0.922969 11.94C0.922969 11.34 1.06297 10.8 1.34297 10.32C1.6363 9.84 2.10964 9.46 2.76297 9.18C3.4163 8.9 4.28297 8.76 5.36297 8.76H8.46297V10.42H5.54297C4.68964 10.42 4.1163 10.56 3.82297 10.84C3.52964 11.1067 3.38297 11.44 3.38297 11.84C3.38297 12.2933 3.56297 12.6533 3.92297 12.92C4.28297 13.1867 4.78297 13.32 5.42297 13.32C6.0363 13.32 6.58297 13.18 7.06297 12.9C7.5563 12.62 7.90964 12.2067 8.12297 11.66L8.54297 13.16C8.30297 13.7867 7.86964 14.2733 7.24297 14.62C6.62964 14.9667 5.84964 15.14 4.90297 15.14ZM30.8061 15.14C29.8994 15.14 29.0928 14.94 28.3861 14.54C27.6794 14.14 27.1194 13.54 26.7061 12.74C26.3061 11.9267 26.1061 10.9 26.1061 9.66C26.1061 8.40667 26.3128 7.38 26.7261 6.58C27.1528 5.78 27.7194 5.18667 28.4261 4.8C29.1461 4.4 29.9394 4.2 30.8061 4.2C31.8594 4.2 32.7861 4.42667 33.5861 4.88C34.3994 5.33333 35.0394 5.96667 35.5061 6.78C35.9861 7.59333 36.2261 8.55333 36.2261 9.66C36.2261 10.7667 35.9861 11.7267 35.5061 12.54C35.0394 13.3533 34.3994 13.9933 33.5861 14.46C32.7861 14.9133 31.8594 15.14 30.8061 15.14ZM24.8861 15V0.159999H27.3861V6.8L27.1861 9.64L27.2661 12.48V15H24.8861ZM30.5261 13C31.1261 13 31.6594 12.8667 32.1261 12.6C32.6061 12.3333 32.9861 11.9467 33.2661 11.44C33.5461 10.9333 33.6861 10.34 33.6861 9.66C33.6861 8.96667 33.5461 8.37333 33.2661 7.88C32.9861 7.37333 32.6061 6.98667 32.1261 6.72C31.6594 6.45333 31.1261 6.32 30.5261 6.32C29.9261 6.32 29.3861 6.45333 28.9061 6.72C28.4261 6.98667 28.0461 7.37333 27.7661 7.88C27.4861 8.37333 27.3461 8.96667 27.3461 9.66C27.3461 10.34 27.4861 10.9333 27.7661 11.44C28.0461 11.9467 28.4261 12.3333 28.9061 12.6C29.3861 12.8667 29.9261 13 30.5261 13ZM6.83688 39.14C5.71688 39.14 4.71688 38.9067 3.83688 38.44C2.97021 37.96 2.29021 37.3067 1.79688 36.48C1.30354 35.6533 1.05688 34.7133 1.05688 33.66C1.05688 32.5933 1.30354 31.6533 1.79688 30.84C2.29021 30.0133 2.97021 29.3667 3.83688 28.9C4.71688 28.4333 5.71688 28.2 6.83688 28.2C7.87688 28.2 8.79021 28.4133 9.57688 28.84C10.3769 29.2533 10.9835 29.8667 11.3969 30.68L9.47688 31.8C9.15688 31.2933 8.76354 30.92 8.29688 30.68C7.84354 30.44 7.35021 30.32 6.81688 30.32C6.20354 30.32 5.65021 30.4533 5.15688 30.72C4.66354 30.9867 4.27688 31.3733 3.99688 31.88C3.71688 32.3733 3.57688 32.9667 3.57688 33.66C3.57688 34.3533 3.71688 34.9533 3.99688 35.46C4.27688 35.9533 4.66354 36.3333 5.15688 36.6C5.65021 36.8667 6.20354 37 6.81688 37C7.35021 37 7.84354 36.88 8.29688 36.64C8.76354 36.4 9.15688 36.0267 9.47688 35.52L11.3969 36.64C10.9835 37.44 10.3769 38.06 9.57688 38.5C8.79021 38.9267 7.87688 39.14 6.83688 39.14ZM29.1327 39.14C28.106 39.14 27.1793 38.9133 26.3527 38.46C25.5393 37.9933 24.8993 37.3533 24.4327 36.54C23.966 35.7267 23.7327 34.7667 23.7327 33.66C23.7327 32.5533 23.966 31.5933 24.4327 30.78C24.8993 29.9667 25.5393 29.3333 26.3527 28.88C27.1793 28.4267 28.106 28.2 29.1327 28.2C30.026 28.2 30.826 28.4 31.5327 28.8C32.2393 29.1867 32.7993 29.78 33.2127 30.58C33.626 31.38 33.8327 32.4067 33.8327 33.66C33.8327 34.9 33.6327 35.9267 33.2327 36.74C32.8327 37.54 32.2793 38.14 31.5727 38.54C30.866 38.94 30.0527 39.14 29.1327 39.14ZM29.4327 37C30.0327 37 30.566 36.8667 31.0327 36.6C31.5127 36.3333 31.8927 35.9467 32.1727 35.44C32.466 34.9333 32.6127 34.34 32.6127 33.66C32.6127 32.9667 32.466 32.3733 32.1727 31.88C31.8927 31.3733 31.5127 30.9867 31.0327 30.72C30.566 30.4533 30.0327 30.32 29.4327 30.32C28.8327 30.32 28.2927 30.4533 27.8127 30.72C27.346 30.9867 26.966 31.3733 26.6727 31.88C26.3927 32.3733 26.2527 32.9667 26.2527 33.66C26.2527 34.34 26.3927 34.9333 26.6727 35.44C26.966 35.9467 27.346 36.3333 27.8127 36.6C28.2927 36.8667 28.8327 37 29.4327 37ZM32.6727 39V36.48L32.7727 33.64L32.5727 30.8V24.16H35.0527V39H32.6727Z" fill={color} />
  </svg>
);

const OpenEndedIcon = ({ color = "black" }: { color?: string }) => (
  <svg width="36" height="35" viewBox="0 0 36 35" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M31.125 16.7708C31.13 18.6957 30.6803 20.5944 29.8125 22.3125C28.7835 24.3713 27.2017 26.103 25.2442 27.3135C23.2867 28.5241 21.0308 29.1658 18.7292 29.1667C16.8044 29.1717 14.9056 28.722 13.1875 27.8542L4.875 30.625L7.64583 22.3125C6.77802 20.5944 6.32831 18.6957 6.33333 16.7708C6.33422 14.4692 6.97589 12.2133 8.18647 10.2558C9.39704 8.29829 11.1287 6.71646 13.1875 5.68751C14.9056 4.8197 16.8044 4.36999 18.7292 4.37501H19.4583C22.498 4.54271 25.369 5.8257 27.5217 7.97835C29.6743 10.131 30.9573 13.002 31.125 16.0417V16.7708Z" stroke={color} stroke-width="2.91667" stroke-linecap="round" stroke-linejoin="round" />
  </svg>
);

const OpinionScaleIcon = ({ color = "black" }: { color?: string }) => (
  <svg width="50" height="50" viewBox="0 0 50 50" fill="none" xmlns="http://www.w3.org/2000/svg">
    <g mask="url(#mask0_294_1755)">
      <path d="M35.4165 35.4167C32.9165 35.4167 30.7116 34.6267 28.8019 33.0469C26.8922 31.467 25.6943 29.4792 25.2082 27.0833H14.1665C13.7498 28.0208 13.1075 28.7761 12.2394 29.349C11.3714 29.9219 10.4165 30.2083 9.37484 30.2083C7.9165 30.2083 6.68387 29.7049 5.67692 28.6979C4.66998 27.691 4.1665 26.4583 4.1665 25C4.1665 23.5417 4.66998 22.309 5.67692 21.3021C6.68387 20.2951 7.9165 19.7917 9.37484 19.7917C10.4165 19.7917 11.3714 20.0781 12.2394 20.6511C13.1075 21.224 13.7498 21.9792 14.1665 22.9167H25.2082C25.6943 20.5208 26.8922 18.533 28.8019 16.9531C30.7116 15.3733 32.9165 14.5833 35.4165 14.5833C38.2985 14.5833 40.7551 15.599 42.7863 17.6302C44.8176 19.6615 45.8332 22.1181 45.8332 25C45.8332 27.882 44.8176 30.3386 42.7863 32.3698C40.7551 34.4011 38.2985 35.4167 35.4165 35.4167ZM35.4165 31.25C37.1526 31.25 38.6283 30.6424 39.8436 29.4271C41.0589 28.2118 41.6665 26.7361 41.6665 25C41.6665 23.2639 41.0589 21.7882 39.8436 20.5729C38.6283 19.3576 37.1526 18.75 35.4165 18.75C33.6804 18.75 32.2047 19.3576 30.9894 20.5729C29.7741 21.7882 29.1665 23.2639 29.1665 25C29.1665 26.7361 29.7741 28.2118 30.9894 29.4271C32.2047 30.6424 33.6804 31.25 35.4165 31.25Z" fill={color} />
    </g>
  </svg>
);

const types = [
  {
    key: 'yes_or_no',
    label: 'YES/NO',
    Icon: YesNoIcon,
  },
  {
    key: 'multiple_choice',
    label: 'MULTIPLE CHOICE',
    Icon: MultipleChoiceIcon,
  },
  {
    key: 'open_ended',
    label: 'OPEN ENDED',
    Icon: OpenEndedIcon,
  },
  {
    key: 'opinion_scale',
    label: 'OPINION SCALE',
    Icon: OpinionScaleIcon,
    disabled: true,
  },
];

interface Props {
  questionData: {
    question: string,
    questionType: string,
    options: string[]
  }
  setQuestionData: (value: any) => void
}

const DecisionHubQuestionType: FC<Props> = ({ questionData, setQuestionData }) => {
  const { question, questionType } = questionData

  const handleTypeSelection = (type: string) => {
    let options: any[] = []
    if (type === 'yes_or_no' || type === 'open_ended') {
      options = [
        {
          text: 'YES'
        },
        {
          text: 'NO'
        }
      ]
    }

    setQuestionData({
      ...questionData,
      questionType: type,
      options: options
    })
  }

  return (
    <div className='flex flex-col gap-[18px] px-[49px]'>
      <Typography variant="h3" className="font-bold text-black">
        What type of question will this be?
      </Typography>
      <Typography variant="h6" className="text-black">
        Pick an answer below for extra detail about what each type is!
      </Typography>
      <div className="flex gap-4 mt-4">
        {types.map(({ key, label, Icon, disabled }) => (
          <div
            key={key}
            onClick={() => !disabled && handleTypeSelection(key)}
            className={`flex flex-col items-center justify-center w-[96px] h-[115px] pb-[11px] rounded-lg border-2 transition-all duration-200
          ${disabled ? 'bg-gray-100 border-gray-200 text-gray-400 cursor-not-allowed' : 
            questionType === key ? 'bg-[#7B69AF] border-[#7B69AF] text-white shadow-lg cursor-pointer' : 
            'bg-white border-gray-300 text-black cursor-pointer'}`}
          >
            <div className='flex-1 flex items-center justify-center'>
              <Icon color={questionType === key ? 'white' : 'black'} />
            </div>
            <span className="font-semibold text-[14px] text-center h-[34px] flex-none flex items-center justify-center px-1">{label}</span>
          </div>
        ))}
      </div>
    </div>
  )
}

export default DecisionHubQuestionType
